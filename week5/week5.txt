‚úÖ‡∏ù‡∏∂‡∏Å functional programming + pipeline ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡πÉ‡∏ä‡πâ map ‚Üí filter ‚Üí reduce ‡πÅ‡∏ö‡∏ö chain (‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô)

‚úÖ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡πÉ‡∏ä‡πâ Array(length) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
.fill(value) ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å element ‡∏Ç‡∏≠‡∏á array


‡πÄ‡∏ä‡πá‡∏Ñ null/undefined ‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏Å‡∏±‡∏ô error
‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á word frequency counting (‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ã‡πâ‡∏≥) + object manipulation
.toLowerCase().split(" ") ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‡πÉ‡∏ä‡πâ object (freq) ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏õ‡∏£‡∏≤‡∏Å‡∏è

üëâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ data cleaning
filter(Boolean) = ‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô falsy ‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô false, 0, '', null, undefined, NaN)
‡πÑ‡∏î‡πâ array ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏ï‡πà‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ (truthy values)

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Higher-Order Functions (map, filter, reduce)
‡∏Å‡∏≤‡∏£ clean ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (filter falsy, remove duplicate)
‡∏Å‡∏≤‡∏£ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (split, lowercase, count)
‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Object / Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤